// server/index.ts
import express2 from "express";

// server/routes.ts
import { createServer } from "http";

// server/storage.ts
import { randomUUID } from "crypto";
import bcrypt from "bcrypt";
var MemStorage = class {
  users = /* @__PURE__ */ new Map();
  loanApplications = /* @__PURE__ */ new Map();
  dsaPartners = /* @__PURE__ */ new Map();
  leads = /* @__PURE__ */ new Map();
  contactQueries = /* @__PURE__ */ new Map();
  constructor() {
    this.initializeDefaultUsers();
  }
  async initializeDefaultUsers() {
    const adminId = randomUUID();
    const hashedPassword = await bcrypt.hash("admin123", 10);
    this.users.set(adminId, {
      id: adminId,
      username: "admin",
      email: "admin@jsmf.com",
      password: hashedPassword,
      role: "admin",
      fullName: "System Administrator",
      mobileNumber: "+91 91626 207918",
      city: "Bhopal",
      isActive: true,
      createdAt: /* @__PURE__ */ new Date(),
      updatedAt: /* @__PURE__ */ new Date()
    });
  }
  // User operations
  async getUser(id) {
    return this.users.get(id);
  }
  async getUserByUsername(username) {
    return Array.from(this.users.values()).find((user) => user.username === username);
  }
  async getUserByEmail(email) {
    return Array.from(this.users.values()).find((user) => user.email === email);
  }
  async createUser(insertUser) {
    const id = randomUUID();
    const hashedPassword = await bcrypt.hash(insertUser.password, 10);
    const user = {
      ...insertUser,
      id,
      password: hashedPassword,
      role: insertUser.role || "user",
      city: insertUser.city || null,
      isActive: true,
      createdAt: /* @__PURE__ */ new Date(),
      updatedAt: /* @__PURE__ */ new Date()
    };
    this.users.set(id, user);
    return user;
  }
  async updateUser(id, updates) {
    const user = this.users.get(id);
    if (!user) throw new Error("User not found");
    const updatedUser = { ...user, ...updates, updatedAt: /* @__PURE__ */ new Date() };
    this.users.set(id, updatedUser);
    return updatedUser;
  }
  async authenticateUser(username, password) {
    const user = await this.getUserByUsername(username);
    if (!user) return null;
    const isValid = await bcrypt.compare(password, user.password);
    return isValid ? user : null;
  }
  // Loan application operations
  async createLoanApplication(application) {
    const id = randomUUID();
    const loanApp = {
      ...application,
      id,
      userId: application.userId,
      amount: application.amount || null,
      tenure: application.tenure || null,
      monthlyIncome: application.monthlyIncome || null,
      employmentType: application.employmentType || null,
      purpose: application.purpose || null,
      interestRate: "7.5",
      status: "pending",
      assignedDsaId: null,
      documents: null,
      remarks: null,
      createdAt: /* @__PURE__ */ new Date(),
      updatedAt: /* @__PURE__ */ new Date()
    };
    this.loanApplications.set(id, loanApp);
    return loanApp;
  }
  async getLoanApplications() {
    return Array.from(this.loanApplications.values());
  }
  async getLoanApplicationsByUser(userId) {
    return Array.from(this.loanApplications.values()).filter((app2) => app2.userId === userId);
  }
  async getLoanApplicationsByDsa(dsaId) {
    return Array.from(this.loanApplications.values()).filter((app2) => app2.assignedDsaId === dsaId);
  }
  async updateLoanApplication(id, updates) {
    const application = this.loanApplications.get(id);
    if (!application) throw new Error("Application not found");
    const updatedApp = { ...application, ...updates, updatedAt: /* @__PURE__ */ new Date() };
    this.loanApplications.set(id, updatedApp);
    return updatedApp;
  }
  // DSA partner operations
  async createDsaPartner(partner) {
    const id = randomUUID();
    const dsaPartner = {
      ...partner,
      id,
      userId: partner.userId,
      experience: partner.experience || null,
      background: partner.background || null,
      commissionRate: "2.0",
      totalEarnings: "0",
      totalLeads: 0,
      successfulLeads: 0,
      kycStatus: "pending",
      createdAt: /* @__PURE__ */ new Date(),
      updatedAt: /* @__PURE__ */ new Date()
    };
    this.dsaPartners.set(id, dsaPartner);
    return dsaPartner;
  }
  async getDsaPartners() {
    return Array.from(this.dsaPartners.values());
  }
  async getDsaPartnerByUserId(userId) {
    return Array.from(this.dsaPartners.values()).find((partner) => partner.userId === userId);
  }
  async updateDsaPartner(id, updates) {
    const partner = this.dsaPartners.get(id);
    if (!partner) throw new Error("DSA partner not found");
    const updatedPartner = { ...partner, ...updates, updatedAt: /* @__PURE__ */ new Date() };
    this.dsaPartners.set(id, updatedPartner);
    return updatedPartner;
  }
  // Lead operations
  async createLead(lead) {
    const id = randomUUID();
    const newLead = {
      ...lead,
      id,
      email: lead.email || null,
      amount: lead.amount || null,
      city: lead.city || null,
      source: lead.source || "website",
      status: "new",
      assignedDsaId: null,
      assignedAt: null,
      convertedAt: null,
      remarks: null,
      createdAt: /* @__PURE__ */ new Date(),
      updatedAt: /* @__PURE__ */ new Date()
    };
    this.leads.set(id, newLead);
    return newLead;
  }
  async getLeads() {
    return Array.from(this.leads.values());
  }
  async getLeadsByDsa(dsaId) {
    return Array.from(this.leads.values()).filter((lead) => lead.assignedDsaId === dsaId);
  }
  async assignLeadToDsa(leadId, dsaId) {
    const lead = this.leads.get(leadId);
    if (!lead) throw new Error("Lead not found");
    const updatedLead = {
      ...lead,
      assignedDsaId: dsaId,
      assignedAt: /* @__PURE__ */ new Date(),
      updatedAt: /* @__PURE__ */ new Date()
    };
    this.leads.set(leadId, updatedLead);
    return updatedLead;
  }
  async updateLead(id, updates) {
    const lead = this.leads.get(id);
    if (!lead) throw new Error("Lead not found");
    const updatedLead = { ...lead, ...updates, updatedAt: /* @__PURE__ */ new Date() };
    this.leads.set(id, updatedLead);
    return updatedLead;
  }
  // Contact query operations
  async createContactQuery(query) {
    const id = randomUUID();
    const contactQuery = {
      ...query,
      id,
      email: query.email || null,
      loanType: query.loanType || null,
      status: "new",
      createdAt: /* @__PURE__ */ new Date()
    };
    this.contactQueries.set(id, contactQuery);
    return contactQuery;
  }
  async getContactQueries() {
    return Array.from(this.contactQueries.values());
  }
  async updateContactQuery(id, updates) {
    const query = this.contactQueries.get(id);
    if (!query) throw new Error("Contact query not found");
    const updatedQuery = { ...query, ...updates };
    this.contactQueries.set(id, updatedQuery);
    return updatedQuery;
  }
};
var storage = new MemStorage();

// server/routes.ts
import session from "express-session";

// shared/schema.ts
import { sql } from "drizzle-orm";
import { pgTable, text, varchar, timestamp, decimal, integer, boolean } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
var users = pgTable("users", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  username: text("username").notNull().unique(),
  email: text("email").notNull().unique(),
  password: text("password").notNull(),
  role: text("role").notNull().default("user"),
  // "admin", "dsa", "user"
  fullName: text("full_name").notNull(),
  mobileNumber: text("mobile_number").notNull(),
  city: text("city"),
  isActive: boolean("is_active").default(true),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow()
});
var loanApplications = pgTable("loan_applications", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  userId: varchar("user_id").references(() => users.id),
  loanType: text("loan_type").notNull(),
  // "personal", "business", "home", "lap", "working-capital"
  amount: decimal("amount", { precision: 12, scale: 2 }),
  tenure: integer("tenure"),
  // in months
  interestRate: decimal("interest_rate", { precision: 5, scale: 2 }).default("7.5"),
  status: text("status").default("pending"),
  // "pending", "approved", "rejected", "under-review"
  assignedDsaId: varchar("assigned_dsa_id").references(() => users.id),
  monthlyIncome: decimal("monthly_income", { precision: 10, scale: 2 }),
  employmentType: text("employment_type"),
  // "salaried", "self-employed", "business"
  purpose: text("purpose"),
  documents: text("documents"),
  // JSON string of uploaded documents
  remarks: text("remarks"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow()
});
var dsaPartners = pgTable("dsa_partners", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  userId: varchar("user_id").references(() => users.id).notNull(),
  experience: text("experience"),
  background: text("background"),
  commissionRate: decimal("commission_rate", { precision: 5, scale: 2 }).default("2.0"),
  totalEarnings: decimal("total_earnings", { precision: 12, scale: 2 }).default("0"),
  totalLeads: integer("total_leads").default(0),
  successfulLeads: integer("successful_leads").default(0),
  kycStatus: text("kyc_status").default("pending"),
  // "pending", "verified", "rejected"
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow()
});
var leads = pgTable("leads", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  name: text("name").notNull(),
  mobileNumber: text("mobile_number").notNull(),
  email: text("email"),
  loanType: text("loan_type").notNull(),
  amount: decimal("amount", { precision: 12, scale: 2 }),
  city: text("city"),
  source: text("source").default("website"),
  // "website", "referral", "advertisement"
  status: text("status").default("new"),
  // "new", "contacted", "qualified", "converted", "closed"
  assignedDsaId: varchar("assigned_dsa_id").references(() => users.id),
  assignedAt: timestamp("assigned_at"),
  convertedAt: timestamp("converted_at"),
  remarks: text("remarks"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow()
});
var contactQueries = pgTable("contact_queries", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  name: text("name").notNull(),
  mobileNumber: text("mobile_number").notNull(),
  email: text("email"),
  loanType: text("loan_type"),
  message: text("message").notNull(),
  status: text("status").default("new"),
  // "new", "responded", "closed"
  createdAt: timestamp("created_at").defaultNow()
});
var insertUserSchema = createInsertSchema(users).pick({
  username: true,
  email: true,
  password: true,
  role: true,
  fullName: true,
  mobileNumber: true,
  city: true
});
var insertLoanApplicationSchema = createInsertSchema(loanApplications).pick({
  loanType: true,
  amount: true,
  tenure: true,
  monthlyIncome: true,
  employmentType: true,
  purpose: true
});
var insertDsaPartnerSchema = createInsertSchema(dsaPartners).pick({
  experience: true,
  background: true
});
var insertLeadSchema = createInsertSchema(leads).pick({
  name: true,
  mobileNumber: true,
  email: true,
  loanType: true,
  amount: true,
  city: true,
  source: true
});
var insertContactQuerySchema = createInsertSchema(contactQueries).pick({
  name: true,
  mobileNumber: true,
  email: true,
  loanType: true,
  message: true
});

// server/routes.ts
function setupSession(app2) {
  app2.use(session({
    secret: process.env.SESSION_SECRET || "jsmf-secret-key-2024",
    resave: false,
    saveUninitialized: false,
    cookie: {
      secure: false,
      maxAge: 24 * 60 * 60 * 1e3
      // 24 hours
    }
  }));
}
function requireAuth(req, res, next) {
  if (!req.session.userId) {
    return res.status(401).json({ message: "Unauthorized" });
  }
  next();
}
function requireRole(role) {
  return (req, res, next) => {
    if (!req.session.userId || req.session.userRole !== role) {
      return res.status(403).json({ message: "Forbidden" });
    }
    next();
  };
}
async function registerRoutes(app2) {
  setupSession(app2);
  app2.post("/api/auth/login", async (req, res) => {
    try {
      const { username, password } = req.body;
      const user = await storage.authenticateUser(username, password);
      if (!user) {
        return res.status(401).json({ message: "Invalid credentials" });
      }
      req.session.userId = user.id;
      req.session.userRole = user.role;
      res.json({
        user: {
          id: user.id,
          username: user.username,
          role: user.role,
          fullName: user.fullName,
          email: user.email
        }
      });
    } catch (error) {
      console.error("Login error:", error);
      res.status(500).json({ message: "Login failed" });
    }
  });
  app2.post("/api/auth/logout", (req, res) => {
    req.session.destroy(() => {
      res.json({ message: "Logged out successfully" });
    });
  });
  app2.get("/api/auth/user", requireAuth, async (req, res) => {
    try {
      const user = await storage.getUser(req.session.userId);
      if (!user) {
        return res.status(404).json({ message: "User not found" });
      }
      res.json({
        id: user.id,
        username: user.username,
        role: user.role,
        fullName: user.fullName,
        email: user.email
      });
    } catch (error) {
      res.status(500).json({ message: "Failed to get user" });
    }
  });
  app2.post("/api/users/register", async (req, res) => {
    try {
      const userData = insertUserSchema.parse(req.body);
      const existingUser = await storage.getUserByUsername(userData.username);
      if (existingUser) {
        return res.status(400).json({ message: "Username already exists" });
      }
      const existingEmail = await storage.getUserByEmail(userData.email);
      if (existingEmail) {
        return res.status(400).json({ message: "Email already registered" });
      }
      const user = await storage.createUser(userData);
      res.status(201).json({
        user: {
          id: user.id,
          username: user.username,
          role: user.role,
          fullName: user.fullName,
          email: user.email
        }
      });
    } catch (error) {
      console.error("Registration error:", error);
      res.status(400).json({ message: "Registration failed" });
    }
  });
  app2.post("/api/loan-applications", requireAuth, async (req, res) => {
    try {
      const applicationData = insertLoanApplicationSchema.parse(req.body);
      const application = await storage.createLoanApplication({
        ...applicationData,
        userId: req.session.userId
      });
      const user = await storage.getUser(req.session.userId);
      if (user) {
        await storage.createLead({
          name: user.fullName,
          mobileNumber: user.mobileNumber,
          email: user.email,
          loanType: applicationData.loanType,
          amount: applicationData.amount || "0",
          city: user.city || "Bhopal",
          source: "application"
        });
      }
      res.status(201).json(application);
    } catch (error) {
      console.error("Application creation error:", error);
      res.status(400).json({ message: "Failed to create application" });
    }
  });
  app2.get("/api/loan-applications", requireAuth, async (req, res) => {
    try {
      let applications;
      if (req.session.userRole === "admin") {
        applications = await storage.getLoanApplications();
      } else if (req.session.userRole === "dsa") {
        applications = await storage.getLoanApplicationsByDsa(req.session.userId);
      } else {
        applications = await storage.getLoanApplicationsByUser(req.session.userId);
      }
      res.json(applications);
    } catch (error) {
      res.status(500).json({ message: "Failed to get applications" });
    }
  });
  app2.patch("/api/loan-applications/:id", requireRole("admin"), async (req, res) => {
    try {
      const { id } = req.params;
      const updates = req.body;
      const application = await storage.updateLoanApplication(id, updates);
      res.json(application);
    } catch (error) {
      res.status(400).json({ message: "Failed to update application" });
    }
  });
  app2.post("/api/dsa-partners", async (req, res) => {
    try {
      const { userData, partnerData } = req.body;
      const userInput = { ...userData, role: "dsa" };
      const parsedUserData = insertUserSchema.parse(userInput);
      const user = await storage.createUser(parsedUserData);
      const parsedPartnerData = insertDsaPartnerSchema.parse(partnerData);
      const partner = await storage.createDsaPartner({
        ...parsedPartnerData,
        userId: user.id
      });
      res.status(201).json({ user, partner });
    } catch (error) {
      console.error("DSA registration error:", error);
      res.status(400).json({ message: "DSA registration failed" });
    }
  });
  app2.get("/api/dsa-partners", requireRole("admin"), async (req, res) => {
    try {
      const partners = await storage.getDsaPartners();
      res.json(partners);
    } catch (error) {
      res.status(500).json({ message: "Failed to get DSA partners" });
    }
  });
  app2.get("/api/dsa-partners/profile", requireRole("dsa"), async (req, res) => {
    try {
      const partner = await storage.getDsaPartnerByUserId(req.session.userId);
      res.json(partner);
    } catch (error) {
      res.status(500).json({ message: "Failed to get DSA profile" });
    }
  });
  app2.post("/api/leads", async (req, res) => {
    try {
      const leadData = insertLeadSchema.parse(req.body);
      const lead = await storage.createLead(leadData);
      res.status(201).json(lead);
    } catch (error) {
      console.error("Lead creation error:", error);
      res.status(400).json({ message: "Failed to create lead" });
    }
  });
  app2.get("/api/leads", requireAuth, async (req, res) => {
    try {
      let leads2;
      if (req.session.userRole === "admin") {
        leads2 = await storage.getLeads();
      } else if (req.session.userRole === "dsa") {
        leads2 = await storage.getLeadsByDsa(req.session.userId);
      } else {
        return res.status(403).json({ message: "Forbidden" });
      }
      res.json(leads2);
    } catch (error) {
      res.status(500).json({ message: "Failed to get leads" });
    }
  });
  app2.patch("/api/leads/:id/assign", requireRole("admin"), async (req, res) => {
    try {
      const { id } = req.params;
      const { dsaId } = req.body;
      const lead = await storage.assignLeadToDsa(id, dsaId);
      res.json(lead);
    } catch (error) {
      res.status(400).json({ message: "Failed to assign lead" });
    }
  });
  app2.patch("/api/leads/:id", requireAuth, async (req, res) => {
    try {
      const { id } = req.params;
      const updates = req.body;
      const lead = await storage.updateLead(id, updates);
      res.json(lead);
    } catch (error) {
      res.status(400).json({ message: "Failed to update lead" });
    }
  });
  app2.post("/api/contact-queries", async (req, res) => {
    try {
      const queryData = insertContactQuerySchema.parse(req.body);
      const query = await storage.createContactQuery(queryData);
      res.status(201).json(query);
    } catch (error) {
      console.error("Contact query error:", error);
      res.status(400).json({ message: "Failed to submit query" });
    }
  });
  app2.get("/api/contact-queries", requireRole("admin"), async (req, res) => {
    try {
      const queries = await storage.getContactQueries();
      res.json(queries);
    } catch (error) {
      res.status(500).json({ message: "Failed to get contact queries" });
    }
  });
  const httpServer = createServer(app2);
  return httpServer;
}

// server/vite.ts
import express from "express";
import fs from "fs";
import path2 from "path";
import { createServer as createViteServer, createLogger } from "vite";

// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
var vite_config_default = defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    ...process.env.NODE_ENV !== "production" && process.env.REPL_ID !== void 0 ? [
      await import("@replit/vite-plugin-cartographer").then(
        (m) => m.cartographer()
      )
    ] : []
  ],
  resolve: {
    alias: {
      "@": path.resolve(import.meta.dirname, "client", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
      "@assets": path.resolve(import.meta.dirname, "attached_assets")
    }
  },
  root: path.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true
  },
  server: {
    fs: {
      strict: true,
      deny: ["**/.*"]
    }
  }
});

// server/vite.ts
import { nanoid } from "nanoid";
var viteLogger = createLogger();
function log(message, source = "express") {
  const formattedTime = (/* @__PURE__ */ new Date()).toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true
  });
  console.log(`${formattedTime} [${source}] ${message}`);
}
async function setupVite(app2, server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true
  };
  const vite = await createViteServer({
    ...vite_config_default,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      }
    },
    server: serverOptions,
    appType: "custom"
  });
  app2.use(vite.middlewares);
  app2.use("*", async (req, res, next) => {
    const url = req.originalUrl;
    try {
      const clientTemplate = path2.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html"
      );
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e);
      next(e);
    }
  });
}
function serveStatic(app2) {
  const distPath = path2.resolve(import.meta.dirname, "public");
  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`
    );
  }
  app2.use(express.static(distPath));
  app2.use("*", (_req, res) => {
    res.sendFile(path2.resolve(distPath, "index.html"));
  });
}

// server/index.ts
var app = express2();
app.use(express2.json());
app.use(express2.urlencoded({ extended: false }));
app.use((req, res, next) => {
  const start = Date.now();
  const path3 = req.path;
  let capturedJsonResponse = void 0;
  const originalResJson = res.json;
  res.json = function(bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path3.startsWith("/api")) {
      let logLine = `${req.method} ${path3} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "\u2026";
      }
      log(logLine);
    }
  });
  next();
});
(async () => {
  const server = await registerRoutes(app);
  app.use((err, _req, res, _next) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    throw err;
  });
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }
  const port = parseInt(process.env.PORT || "5000", 10);
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true
  }, () => {
    log(`serving on port ${port}`);
  });
})();
